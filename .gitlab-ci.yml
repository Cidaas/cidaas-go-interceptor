image: golang:latest


include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

variables:
  REPO_NAME: gitlab.widas.de/cidaas-public-devkits/cidaas-interceptors/cidaas-go-interceptor

before_script:
  - mkdir -p ~/.docker
  - echo $CIM_DOCKER_CRED > ~/.docker/config.json
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - prepare
  - test
  - build
  - update-version
  - release
  - badges
  - deploy

coverage:
  stage: test
  before_script:
    - echo "machine gitlab.widas.de login $GITLAB_LOGIN password $GITLAB_TOKEN" > ~/.netrc
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test ./... -v -coverprofile .coverage.txt
    - go tool cover -func .coverage.txt
    - go tool cover -html=.coverage.txt -o coverage.html
  artifacts:
    paths:
      - coverage.html

get_version:
  image: makocchi/alpine-git-curl-jq
  stage: update-version
  script:
    - echo "export PACKAGE_VERSION="$(git describe --abbrev=0 --tags)"" >> variables
    - echo "export TIMESTAMP="$(date +%s)"" >> variables
  artifacts:
    paths:
      - variables
    expire_in: 1 hrs
  except:
    - tags

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  before_script:
    - echo "machine gitlab.widas.de login $GITLAB_LOGIN password $GITLAB_TOKEN" > ~/.netrc
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --build-tags=musl --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

release:
  image: nexus.widas.de:18700/go-sementic-release:v2.13.0
  stage: release
  only:
    - master
  script:
    - semantic-release
